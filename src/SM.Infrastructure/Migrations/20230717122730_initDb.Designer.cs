// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SM.Infrastructure;

#nullable disable

namespace SM.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230717122730_initDb")]
    partial class initDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SM.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id", "Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Электроника и гаджеты"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Мода и стиль"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Дом и сад"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Красота и уход"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Спорт и отдых"
                        });
                });

            modelBuilder.Entity("SM.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImgURL")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandName = "SomeBrand",
                            CategoryId = 1,
                            Description = "Мощный и современный смартфон с отличным качеством камеры.",
                            Name = "Смартфон",
                            Price = 599.99m
                        },
                        new
                        {
                            Id = 2,
                            BrandName = "AnotherBrand",
                            CategoryId = 1,
                            Description = "Легкий и портативный ноутбук с высокой производительностью.",
                            Name = "Ноутбук",
                            Price = 999.50m
                        },
                        new
                        {
                            Id = 3,
                            BrandName = "FashionBrand",
                            CategoryId = 2,
                            Description = "Комфортная футболка с оригинальным дизайном.",
                            Name = "Футболка",
                            Price = 19.99m
                        });
                });

            modelBuilder.Entity("SM.Domain.Entities.Product", b =>
                {
                    b.HasOne("SM.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SM.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
